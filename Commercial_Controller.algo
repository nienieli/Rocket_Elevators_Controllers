'---------------------------DEFINITION-------------------------------------------------'

'Battery: Set of elevators systems in a building'
'Column: Area where the elevators are. A column can contain more then 1 elevator'
'Elevators: Contains all the elevators in a column'
'Elevator:a platform or compartment housed in a shaft for raising and lowering people or things to different floors or levels'
'Elevator_door: The door of the elevator'
'Elevator_status: what the elevator is doing (moving, stop, idle)'
'Floor_door: The door between the the elevator and the floor you are on'
'Call_button: The button you push to call an elevator'
'Call_button_light: The light in the call_button'
'Elevator_button: The buttons you pressed in the elevator'
'Elevator_button_light: The light in the elevator-button'
'Emergency_switch: A switch in the elevator that triggers the emergency system'
'Panel_button: the button of all floors at the ground floor level'
'Close_the_door button: The button that makes the door close sooner'
'Open_the_door_button: The button that makes the door stay open '
'Direction: Where the elevator is going (up or down)'
'Move: Is the elevator in moving or idling'
'Origin: The beginning point of the elevators'
'column_section: contains the floors where an elevator is designed to go EX: floors 26 to 46'


'------------------------------CORPORATE BUILDING: CLASSIC----------------------------------------------------------------------------------- '


' ------------------------MAIN TO ACTIVE SYSTEM-----------------------------------------

SEQUENCE main
  CALL init_elevator_system
END SEQUENCE

' --------------------------STAGE INIT SYSTEM ------------------------------------------

SEQUENCE init_elevator_system USING battery AND columns AND floor AND elevators
    SET battery status TO operational
    SET column_1 IS EQUAL TO floor_number 0 TO 6
    SET column_1 elevators TO 3 elevator_number (A AND B AND C)

    SET column_2 IS EQUAL TO floor_number 6 TO 26
    SET column_2 elevators TO 3 elevator_number (A AND B AND C)

    SET column_3 IS EQUAL TO floor_number 6 AND 26 TO 46
    SET column_3 elevators TO 3 elevator_number (A AND B AND C)

    SET column_4 IS EQUAL TO floor_number 6 AND 46 TO 66        
    SET column_4 elevators TO 3 elevator_number (A AND B AND C)

    SET columns TO column_1, column_2, column_3, column_4

    FOR EACH elevators IN column_1
        SET Elevators starting position IS EQUAL TO 6
    ENDFOR

    FOR EACH elevators IN column_2
        SET Elevators starting position IS EQUAL TO 6
    ENDFOR

    FOR EACH elevators IN column_3
        SET Elevators starting position IS EQUAL TO 6
    ENDFOR

    FOR EACH elevators IN column_4
        SET Elevators starting position IS EQUAL TO 6
    ENDFOR

    SET Elevators status TO idle
    SET Elevators Doors TO close
END SEQUENCE
'---------------------------FLOOR DISPLAY------------------------------------------'

SEQUENCE floor_display USING elevator AND direction
    floor_display IS EQUAL TO elevator_floor AND elevator_direction
ENDSEQUENCE

'-------------------------CALL BUTTON LIGHT---------------------------------------- '

SEQUENCE call_button_light USING call_button 
    IF call_button is pressed THEN call_button_light is on
        ELSE call_button_light is off 
    END IF
END SEQUENCE

'-------------------------CALL BUTTON DIRECTION---------------------------------------- '

SEQUENCE call_button_direction USING direction AND floor_number
    WHEN call_button is pressed SET direction TO move_up or move_down
    IF call_button_direction IS EQUAL TO move_up THEN 
        CALL elevator WITH elevator_direction IS EQUAL TO call_button_direction
    ELSE call_button_direction IS move_down THEN 
        CALL elevator WITH elevator_direction IS EQUAL TO call_button_direction
    ENDIF
    SET floor_number
ENDSEQUENCE

    ' --------------------CALL ELEVATOR--------------------------------------------------------------------------

SEQUENCE call_elevator USING floor_number AND direction
    ADD floor_number TO elevator_queue
    SORT elevator_queue
        IF direction IS move_up THEN SORT ascending
        ELSE SORT descending
        ENDIF
ENDSEQUENCE

 ' --------------------FIND ELEVATOR--------------------------------------------------------------------------

SEQUENCE find_elevator USING  direction AND floor
    best_case IS NULL
    FOR EACH elevator IN column elevators
        IF elevator direction IS direction 
            SET gap between elevator floor and floor_number      
            IF elevator_direction IS move_up AND the floor_number is GREATER THAN elevator_floor THEN
                IF [gap, elevator, direction] IS BETTER THAN best_case 
                    best_case = [gap, elevator, direction]
            ELSE IF elevator_direction IS move_down AND the floor_number is LESS THAN elevator_floor THEN
                IF [gap, elevator, direction] IS BETTER THAN best_case
                    best_case = [gap, elevator, direction]
            END IF
        ELSE IF elevator_status IS idle  THEN IF 
            IF [gap, elevator, direction] IS BETTER THAN best_case
                    best_case = [gap, elevator, direction]
            END IF
        END IF    
    ENDFOR
    REPEAT find_elevator UNTIL best_case IS NOT EMPTY
    return elevator from best_case
ENDSEQUENCE

SEQUENCE  check_best_case USING find_elevator AND gap AND direction AND floor
CALL best_case  WITH  gap AND direction AND floor
  SET gap between elevator_floor and floor_number
        IF [gap, elevator, idle] IS BETTER THAN best_case                 
            best_case = [gap, elevator, direction]
            IF elevator_direction IS floor_number TAKE elevator FOR best_case
            ELSE BETWEEN floor_number AND elevator_floor the elevator have the smallest gap TAKE elevator FOR best_case
            END IF
        END IF
ENDSEQUENCE

 '-------------------------FLOOR DOOR---------------------------------------- '

SEQUENCE floor_door USING floor 
    IF elevator_floor IS EQUAL floor_door THEN floor_door is open 
        ELSE floor_door is close
    END IF
END SEQUENCE


'-------------------------REQUESTED FLOOR---------------------------------------- '

SEQUENCE requested_floor USING elevator_button
    IF elevator_button is pressed  THEN elevator_button IS requested_floor
        ELSE there is no requested floor
    END IF
END SEQUENCE

'-------------------------LIGHT OF THE ELEVATOR---------------------------------------- '

SEQUENCE elevator_button_light USING elevator_button
    IF elevator_button_light is pressed THEN elevator_button_light IS on
        ELSE elevator_button_light IS off 
    END IF
END SEQUENCE

'-------------------------ELEVATOR DOOR (OPEN/CLOSE)---------------------------------------- '

SEQUENCE open_elevator_door USING elevator
  SET elevator_door is open
    IF elevator_door is open THEN
    SET timer TO 5 seconds THEN
         CALL close_elevator_door    
    ELSE stay open
    END IF
END SEQUENCE

SEQUENCE close_elevator_door USING elevator
  CALL over_weight 
  SET elevator_door IS close
    IF elevator_door IS not obstruct OR over_weight THEN
        close elevator_door 
    ELSE IF elevator_door IS obstruct OR over_weight THEN
        CALL open_elevator_door
    END IF
END SEQUENCE

'-------------------------ELEVATOR DIRECTION (UP/DOWN)---------------------------------------- '

SEQUENCE move_up USING elevator AND direction
    TAKE first element of elevator_queue
    gap IS EQUAL TO floor_number DECREMENT elevator_floor 
    SET elevator_status TO moving
    IF elevator_floor is LESS THAN requested_floor THEN elevator_floor  INCREMENT BY 1
        REPEAT elevator_floor INCREMENT BY 1 UNTIL elevator_floor IS EQUAL TO requested_floor
        ELSE stop at this floor
        SET elevator_status TO stop
    END IF
    REMOVE floor_number FROM elevator_queue
END SEQUENCE

SEQUENCE move_down USING elevator AND direction
    TAKE first element of elevator_queue
    gap iS EQUAL TO elevator_floor DECREMENT floor_number
    SET elevator_status TO moving
    IF elevator_floor IS MORE THAN requested_floor THEN elevator_floor DECREMENT BY 1
        REPEAT elevator_floor DECREMENT BY 1 UNTIL elevator_floor IS EQUAL TO requested_floor
        ELSE stop at this floor
        SET elevator_status TO stop
    END IF
END SEQUENCE

'-------------------------THE OPEN/CLOSE DOOR BUTTON---------------------------------------- '

SEQUENCE open_the_door_button USING elevator_door
    IF open_the_door_button is pressed THEN elevator_door IS open
        ELSE elevator_door IS closing
    END IF
END SEQUENCE

SEQUENCE close_the_door_button USING elevator_door
    IF close_the_door_button is pressed THEN elevator_door IS close
        ELSE elevator_door IS open
    END IF
END SEQUENCE

'-------------------------------OVER WEIGHT----------------------------------------------------'

SEQUENCE over_weight USING elevator
    FOR EACH elevator in column
        SET maximum_weight TO 3500 lbs THEN
        READ weight_sensor THEN
        IF weight_sensor value IS MORE THAN 3500 lbs THEN
            SET heavy_display_light TO ON THEN
            CALL open_doors
            ELSE IF weight_sensor value is LESS THAN 3500 lbs
            SET heavy_display_light TO OFF
        END IF
    END FOR
ENDSEQUENCE

' ------------RETURN ELEVATOR TO ORIGIN POINTS--------------------------------------------------------------

SEQUENCE return_origin USING elevator AND floor
  
  between 10am to 4am
  
  SET origin TO 6
    IF elevator_floor IS LESS THAN 6 THEN 
        CALL move_up 
        SET elevator_status TO moving
        UNTIL elevator_floor IS EQUAL TO origin THEN
        SET elevator_status TO idle
    ELSE elevator_floor IS MORE THAN 6 THEN 
        CALL move_down 
        SET elevator_status TO moving
        UNTIL elevator_floor IS EQUAL TO origin THEN
        SET elevator_status TO idle
    ENDIF

between 4am to 10am

    FOR column_1
        SET origin TO 6 
            IF elevator_floor IS LESS THAN 6 THEN 
                CALL move_up 
                SET elevator_status TO moving
                UNTIL elevator_floor IS EQUAL TO origin THEN
                SET elevator_status TO idle
            ELSE elevator_floor IS MORE THAN 6 THEN 
                CALL move_down 
                SET elevator_status TO moving
                UNTIL elevator_floor IS EQUAL TO origin THEN
                SET elevator_status TO idle
            ENDIF

    FOR column_2 
    SET origin TO 16 
            IF elevator_floor IS LESS THAN 16 THEN 
                CALL move_up 
                SET elevator_status TO moving
                UNTIL elevator_floor IS EQUAL TO origin THEN
                SET elevator_status TO idle
            ELSE elevator_floor IS MORE THAN 16 THEN 
                CALL move_down 
                SET elevator_status TO moving
                UNTIL elevator_floor IS EQUAL TO origin THEN
                SET elevator_status TO idle
            ENDIF

    FOR column_3 
    SET origin TO 36 
            IF elevator_floor IS LESS THAN 36 THEN 
                CALL move_up 
                SET elevator_status TO moving
                UNTIL elevator_floor IS EQUAL TO origin THEN
                SET elevator_status TO idle
            ELSE elevator_floor IS MORE THAN 36 THEN 
                CALL move_down 
                SET elevator_status TO moving
                UNTIL elevator_floor IS EQUAL TO origin THEN
                SET elevator_status TO idle
            ENDIF

    FOR column_4 
    SET origin TO 56 
            IF elevator_floor IS LESS THAN 56 THEN 
                CALL move_up 
                SET elevator_status TO moving
                UNTIL elevator_floor IS EQUAL TO origin THEN
                SET elevator_status TO idle
            ELSE elevator_floor IS MORE THAN 56 THEN 
                CALL move_down 
                SET elevator_status TO moving
                UNTIL elevator_floor IS EQUAL TO origin THEN
                SET elevator_status TO idle
            ENDIF
END SEQUENCE

'------------------------------ELEVATOR STATUS-----------------------------------------------'

SEQUENCE elevator_status USING elevator
    IF elevator is moving 
        SET elevator_status TO moving
    ELSE IF elevator is stop
        SET elevator_status TO stop
    ELSE 
        SET elevator_status TO idle
ENDSEQUENCE

'----------------------------------EMERGENCY--------------------------------------------------'
SEQUENCE emergency USING elevator AND floor AND direction
    IF emergency_switch IS on
        stop elevators TO the NEXT floor AND SET elevator_status TO stop until further notice
    ELSE 
        DO NOTHING
    END IF
ENDSEQUENCE

'-----------------------------EXTERNAL SEQUENCE-----------------------------------------------'

SEQUENCE external_sequence  USING elevator AND direction AND floor
    WHEN call_button IS PRESSED
        CALL floor_display WITH direction AND floor
        CALL call_button_direction WITH direction AND floor
        CALL call_button_light WITH direction AND floor
        elevator = CALL find_elevator WITH direction AND floor
        CALL check_best_case WITH gap AND direction AND floor
        CALL call_elevator WITH elevator AND direction AND floor
        CALL floor_door WITH elevator
ENDSEQUENCE WITH elevator AND direction AND floor


'-----------------------------INTERNAL SEQUENCE-----------------------------------------------'

SEQUENCE internal_sequence USING elevator AND direction
    WHEN call_elevator IS DONE AND elevator IS arrived
        CALL over_weight WITH elevator 
            IF close_elevator_door_button is press THEN CALL close_elevator_door
            ElSE IF open_elevator_door_button THEN CALL  open_elevator_door_button
            ELSE DO NOTHING
            END IF
        CALL close_elevator_door  WITH elevator AND floor
        CALL elevator_queue WITH elevator AND direction AND floor
        CALL requested_floor WITH elevator AND direction AND floor
        CALL appropriate elevator move (up or down) WITH elevator AND direction AND floor
        CHECK elevator_queue 
        CALL open_elevator_door WITH elevator AND direction AND floor
ENDSEQUENCE

'--------------------------------------------------------CORPORATE BUILDING: MODERN-----------------------------------------------------------------'

'-------------------------CALL BUTTON DIRECTION---------------------------------------- '

SEQUENCE call_button_direction USING direction AND floor_number
    WHEN call_button is pressed SET direction TO move_down
    IF  call_button_direction IS move_down THEN 
        CALL elevator WITH elevator_direction IS EQUAL TO call_button_direction
    ELSE IF 
        CALL elevator WITH elevator_status IS idle
    ENDIF
    SET floor_number
ENDSEQUENCE


'-------------------------------CALL ELEVATOR---------------------------------------------'

SEQUENCE call_elevator USING floor AND direction
    SET down
    ADD floor_number TO elevator_queue
    SORT elevator_queue
       ONLY SORT WHEN elevator_direction IS down

    SET up
    ADD floor_number TO elevator_queue
        elevator_queue can ONLY contain 1 floor_number at the time 
ENDSEQUENCE

' ------------RETURN ELEVATOR TO ORIGIN POINTS--------------------------------------------------------------

SEQUENCE return_origin USING elevator AND floor AND direction
    between 10am TO 4 am
    same

    between 4am TO 10am

    FOR column_1
        SET origin TO 7 
            IF elevator_floor IS LESS THAN 7 THEN 
                CALL move_up 
                SET elevator_status TO moving
                UNTIL elevator_floor IS EQUAL TO origin THEN
                SET elevator_status TO idle
            ELSE elevator_floor IS MORE THAN 7 THEN 
                CALL move_down 
                SET elevator_status TO moving
                UNTIL elevator_floor IS EQUAL TO origin THEN
                SET elevator_status TO idle
            ENDIF

    FOR column_2 
    SET origin TO 26 
            IF elevator_floor IS LESS THAN 26 THEN 
                CALL move_up 
                SET elevator_status TO moving
                UNTIL elevator_floor IS EQUAL TO origin THEN
                SET elevator_status TO idle
            ELSE elevator_floor IS MORE THAN 26 THEN 
                CALL move_down 
                SET elevator_status TO moving
                UNTIL elevator_floor IS EQUAL TO origin THEN
                SET elevator_status TO idle
            ENDIF

    FOR column_3 
    SET origin TO 46 
            IF elevator_floor IS LESS THAN 46 THEN 
                CALL move_up 
                SET elevator_status TO moving
                UNTIL elevator_floor IS EQUAL TO origin THEN
                SET elevator_status TO idle
            ELSE elevator_floor IS MORE THAN 46 THEN 
                CALL move_down 
                SET elevator_status TO moving
                UNTIL elevator_floor IS EQUAL TO origin THEN
                SET elevator_status TO idle
            ENDIF

    FOR column_4 
    SET origin TO 66 
            IF elevator_floor IS LESS THAN 66 THEN 
                CALL move_up 
                SET elevator_status TO moving
                UNTIL elevator_floor IS EQUAL TO origin THEN
                SET elevator_status TO idle
            ELSE elevator_floor IS MORE THAN 66 THEN 
                CALL move_down 
                SET elevator_status TO moving
                UNTIL elevator_floor IS EQUAL TO origin THEN
                SET elevator_status TO idle
            ENDIF
END SEQUENCE

'---------------------------FLOOR DISPLAY------------------------------------------'

SEQUENCE floor_display USING elevator AND direction
    floor_display IS EQUAL TO requested_floor AND columns AND elevator_number
ENDSEQUENCE

'-------------------------REQUESTED FLOOR---------------------------------------- '

SEQUENCE requested_floor USING panel_button AND elevator 
    FOR EACH panel_button pressed CALL elevators in the appropriate column
        IF panel_button is pressed  THEN panel_button IS requested_floor
            ELSE there is no requested floor
        END IF
    END FOR
END SEQUENCE

'-------------------------------EXTERNAL SEQUENCE---------------------------------------------'

SEQUENCE external_sequence (to go up) USING elevator AND direction AND floor
WHEN
    CALL floor_display WITH elevator AND direction AND floor
    CALL requested_floor WITH elevator AND direction AND floor
    CALL find_elevator WITH elevator AND direction AND floor
    CALL call_elevators WITH elevator AND direction AND floor
    CALL floor_door WITH elevator AND direction AND floor
ENDSEQUENCE

SEQUENCE external_sequence (to go down) USING elevator AND direction AND floor
WHEN
    CALL floor_display WITH elevator AND direction AND floor
    CALL call_button_direction WITH elevator AND direction AND floor
    CALL call_button_light WITH direction AND floor
    CALL find_elevator WITH elevator AND direction AND floor
    CALL call_elevator WITH elevator AND direction AND floor
    CALL floor_door WITH elevator AND direction AND floor
ENDSEQUENCE

'-------------------------------INTERNAL SEQUENCE---------------------------------------------'
SEQUENCE internal_sequence USING elevator AND direction AND floor
    WHEN call_elevator IS DONE AND elevator IS arrived
        CALL over_weight WITH elevator
        CALL elevator_door WITH elevator AND FLOOR
        CALL move_up or CALL move_down  WITH elevator AND direction AND floor
        CALL elevator_door WITH elvator AND FLOOR
ENDSEQUENCE